apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.jlocation"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    signingConfigs {
        debug
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("boolean", "IS_DEBUG", "true")
            signingConfig signingConfigs.debug
        }
    }
}

// load keystore parameters
Properties props = new Properties()
def propFile = new File('app/keystore.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))
    if (props == null) {
        println 'keystore.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    } else if (props.containsKey('debug_keystore_file') &&
            props.containsKey('debug_keystore_password') &&
            props.containsKey('debug_keystore_alias') &&
            props.containsKey('debug_keystore_alias_password')) {
        android.signingConfigs.debug.storeFile = file(props['debug_keystore_file'])
        android.signingConfigs.debug.storePassword = props['debug_keystore_password']
        android.signingConfigs.debug.keyAlias = props['debug_keystore_alias']
        android.signingConfigs.debug.keyPassword = props['debug_keystore_alias_password']
    } else if (props.containsKey('release_keystore_file') &&
            props.containsKey('release_keystore_password') &&
            props.containsKey('release_keystore_alias') &&
            props.containsKey('release_keystore_alias_password')) {
        android.signingConfigs.release.storeFile = file(props['release_keystore_file'])
        android.signingConfigs.release.storePassword = props['release_keystore_password']
        android.signingConfigs.release.keyAlias = props['release_keystore_alias']
        android.signingConfigs.release.keyPassword = props['release_keystore_alias_password']
    }
} else {
    println 'keystore.properties not found'
    android.buildTypes.release.signingConfig = null
    android.buildTypes.debug.signingConfig = null
}

repositories {
    flatDir {
        dirs 'libs'
    }
    mavenCentral()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
